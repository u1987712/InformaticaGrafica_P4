// ---------------------------------------------------------------------------
// Primitivas geometricas basicas
// J. Ribelles, A. Lopez
// Mayo 2018
// ---------------------------------------------------------------------------

var examplePlane = {  // 4 vértices, 2 triángulos

  "vertices" : [-0.5, 0.0, 0.5,   0.0, 1.0, 0.0,
                 0.5, 0.0, 0.5,   0.0, 1.0, 0.0,
                 0.5, 0.0,-0.5,   0.0, 1.0, 0.0,
                -0.5, 0.0,-0.5,   0.0, 1.0, 0.0],
    
  "indices" :  [ 0, 1, 2, 0, 2, 3]

};

var exampleCube = {  // 24 vértices, 12 triángulos
    
  "vertices" : [-0.5, -0.5,  0.5,   0.0,  0.0,  1.0,
                 0.5, -0.5,  0.5,   0.0,  0.0,  1.0,
                 0.5,  0.5,  0.5,   0.0,  0.0,  1.0,
                -0.5,  0.5,  0.5,   0.0,  0.0,  1.0,
                 0.5, -0.5,  0.5,   1.0,  0.0,  0.0,
                 0.5, -0.5, -0.5,   1.0,  0.0,  0.0,
                 0.5,  0.5, -0.5,   1.0,  0.0,  0.0,
                 0.5,  0.5,  0.5,   1.0,  0.0,  0.0,
                 0.5, -0.5, -0.5,   0.0,  0.0, -1.0,
                -0.5, -0.5, -0.5,   0.0,  0.0, -1.0,
                -0.5,  0.5, -0.5,   0.0,  0.0, -1.0,
                 0.5,  0.5, -0.5,   0.0,  0.0, -1.0,
                -0.5, -0.5, -0.5,  -1.0,  0.0,  0.0,
                -0.5, -0.5,  0.5,  -1.0,  0.0,  0.0,
                -0.5,  0.5,  0.5,  -1.0,  0.0,  0.0,
                -0.5,  0.5, -0.5,  -1.0,  0.0,  0.0,
                -0.5,  0.5,  0.5,   0.0,  1.0,  0.0,
                 0.5,  0.5,  0.5,   0.0,  1.0,  0.0,
                 0.5,  0.5, -0.5,   0.0,  1.0,  0.0,
                -0.5,  0.5, -0.5,   0.0,  1.0,  0.0,
                -0.5, -0.5, -0.5,   0.0, -1.0,  0.0,
                 0.5, -0.5, -0.5,   0.0, -1.0,  0.0,
                 0.5, -0.5,  0.5,   0.0, -1.0,  0.0,
                -0.5, -0.5,  0.5,   0.0, -1.0,  0.0],

  "indices" :  [  0,  1,  2,  0,  2,  3, 
                  4,  5,  6,  4,  6,  7,
                  8,  9, 10,  8, 10, 11,
                 12, 13, 14, 12, 14, 15,
                 16, 17, 18, 16, 18, 19,
                 20, 21, 22, 20, 22, 23]
                   
};

var exampleCover = {  // 13 vértices, 12 triángulos

  "vertices" : [ 1,  0, 0,  0, 0, 1,  0.866,  0.5,   0, 0, 0, 1,  0.5,    0.866, 0, 0, 0, 1,
                 0,  1, 0,  0, 0, 1, -0.5,    0.866, 0, 0, 0, 1, -0.86,   0.5,   0, 0, 0, 1,
                -1,  0, 0,  0, 0, 1, -0.866, -0.5,   0, 0, 0, 1, -0.5,   -0.866, 0, 0, 0, 1,
                 0, -1, 0,  0, 0, 1,  0.5,   -0.866, 0, 0, 0, 1,  0.866, -0.5,   0, 0, 0, 1,
                 0,  0, 0,  0, 0, 1],
                     
  "indices" : [ 0, 1, 12, 1, 2, 12, 2, 3, 12, 3,  4, 12,  4,  5, 12,  5, 6, 12,  
                6, 7, 12, 7, 8, 12, 8, 9, 12, 9, 10, 12, 10, 11, 12, 11, 0, 12]

};

var exampleCone = {  // 24 vértices, 12 triángulos

  "vertices" : [ 1.000,  0.000, 0.000,  0.707,  0.000, 0.707, 0.000, 0.000, 1.000,  0.683,  0.183, 0.707, 
                 0.866,  0.500, 0.000,  0.612,  0.354, 0.707, 0.000, 0.000, 1.000,  0.500,  0.500, 0.707, 
                 0.500,  0.866, 0.000,  0.354,  0.612, 0.707, 0.000, 0.000, 1.000,  0.183,  0.683, 0.707, 
                 0.000,  1.000, 0.000,  0.000,  0.707, 0.707, 0.000, 0.000, 1.000, -0.183,  0.683, 0.707, 
                -0.500,  0.866, 0.000, -0.354,  0.612, 0.707, 0.000, 0.000, 1.000, -0.500,  0.500, 0.707, 
                -0.866,  0.500, 0.000, -0.612,  0.354, 0.707, 0.000, 0.000, 1.000, -0.683,  0.183, 0.707, 
                -1.000,  0.000, 0.000, -0.707,  0.000, 0.707, 0.000, 0.000, 1.000, -0.683, -0.183, 0.707, 
                -0.866, -0.500, 0.000, -0.612, -0.354, 0.707, 0.000, 0.000, 1.000, -0.500, -0.500, 0.707, 
                -0.500, -0.866, 0.000, -0.354, -0.612, 0.707, 0.000, 0.000, 1.000, -0.183, -0.683, 0.707, 
                -0.000, -1.000, 0.000, -0.000, -0.707, 0.707, 0.000, 0.000, 1.000,  0.183, -0.683, 0.707, 
                 0.500, -0.866, 0.000,  0.354, -0.612, 0.707, 0.000, 0.000, 1.000,  0.500, -0.500, 0.707, 
                 0.866, -0.500, 0.000,  0.612, -0.354, 0.707, 0.000, 0.000, 1.000,  0.683, -0.183, 0.707],
    
  "indices" : [  0,  2,  1,  2,  4,  3,  4,  6,  5,  6,  8,  7,  8, 10,  9, 10, 12, 11,  
                12, 14, 13, 14, 16, 15, 16, 18, 17, 18, 20, 19, 20, 22, 21, 22,  0, 23]

};

var exampleCylinder = {  // 24 vértices, 24 triángulos

  "vertices" : [ 1,  0, 0,  1,  0, 0,  0.866,  0.5,   0,  0.866,  0.5,   0,  0.5,    0.866, 0,  0.5,    0.866, 0,  
                 0,  1, 0,  0,  1, 0, -0.5,    0.866, 0, -0.5,    0.866, 0, -0.86,   0.5,   0, -0.86,   0.5,   0, 
                -1,  0, 0, -1,  0, 0, -0.866, -0.5,   0, -0.866, -0.5,   0, -0.5,   -0.866, 0, -0.5,   -0.866, 0,  
                 0, -1, 0,  0, -1, 0,  0.5,   -0.866, 0,  0.5,   -0.866, 0,  0.866, -0.5,   0,  0.866, -0.5,   0, 
                 1,  0, 1,  1,  0, 0,  0.866,  0.5,   1,  0.866,  0.5,   0,  0.5,    0.866, 1,  0.5,    0.866, 0,  
                 0,  1, 1,  0,  1, 0, -0.5,    0.866, 1, -0.5,    0.866, 0, -0.86,   0.5,   1, -0.86,   0.5,   0,  
                -1,  0, 1, -1,  0, 0, -0.866, -0.5,   1, -0.866, -0.5,   0, -0.5,   -0.866, 1, -0.5,   -0.866, 0,  
                 0, -1, 1,  0, -1, 0,  0.5,   -0.866, 1,  0.5,   -0.866, 0,  0.866, -0.5,   1,  0.866, -0.5,   0],
    
  "indices" : [ 0,  1, 12, 1,  2, 13, 2,  3, 14,  3,  4, 15,  4,  5, 16,  5,  6, 17,  
                6,  7, 18, 7,  8, 19, 8,  9, 20,  9, 10, 21, 10, 11, 22, 11,  0, 23,
                1, 13, 12, 2, 14, 13, 3, 15, 14,  4, 16, 15,  5, 17, 16,  6, 18, 17,
                7, 19, 18, 8, 20, 19, 9, 21, 20, 10, 22, 21, 11, 23, 22,  0, 12, 23]

};

var exampleSphere = {  // 42 vértices, 80 triángulos

  "vertices" : [  0.000000, 0.850651, 0.525731,  0.000000, 0.850651, 0.525731,
                 -0.309017, 0.500000, 0.809017, -0.309017, 0.500000, 0.809017,
                  0.309017, 0.500000, 0.809017,  0.309017, 0.500000, 0.809017,
                 -0.525731, 0.000000, 0.850651, -0.525731, 0.000000, 0.850651,
                  0.000000, 0.000000, 1.000000,  0.000000, 0.000000, 1.000000,
                  0.525731, 0.000000, 0.850651,  0.525731, 0.000000, 0.850651,
                 -0.850651, 0.525731, 0.000000, -0.850651, 0.525731, 0.000000,
                 -0.809017, 0.309017, 0.500000, -0.809017, 0.309017, 0.500000,
                 -0.500000, 0.809017, 0.309017, -0.500000, 0.809017, 0.309017,
                  0.000000, 0.850651,-0.525731,  0.000000, 0.850651,-0.525731,
                 -0.500000, 0.809017,-0.309017, -0.500000, 0.809017,-0.309017,
                  0.000000, 1.000000, 0.000000,  0.000000, 1.000000, 0.000000,
                  0.500000, 0.809017,-0.309017,  0.500000, 0.809017,-0.309017,
                  0.500000, 0.809017, 0.309017,  0.500000, 0.809017, 0.309017,
                  0.850651, 0.525731, 0.000000,  0.850651, 0.525731, 0.000000,
                  0.809017, 0.309017, 0.500000,  0.809017, 0.309017, 0.500000,
                  0.850651,-0.525731, 0.000000,  0.850651,-0.525731, 0.000000,
                  1.000000, 0.000000, 0.000000,  1.000000, 0.000000, 0.000000,
                  0.809017,-0.309017, 0.500000,  0.809017,-0.309017, 0.500000,
                  0.525731, 0.000000,-0.850651,  0.525731, 0.000000,-0.850651,
                  0.809017, 0.309017,-0.500000,  0.809017, 0.309017,-0.500000,
                  0.809017,-0.309017,-0.500000,  0.809017,-0.309017,-0.500000,
                  0.309017, 0.500000,-0.809017,  0.309017, 0.500000,-0.809017,
                 -0.525731, 0.000000,-0.850651, -0.525731, 0.000000,-0.850651,
                 -0.309017, 0.500000,-0.809017, -0.309017, 0.500000,-0.809017,
                  0.000000, 0.000000,-1.000000,  0.000000, 0.000000,-1.000000,
                  0.000000,-0.850651,-0.525731,  0.000000,-0.850651,-0.525731,
                 -0.309017,-0.500000,-0.809017, -0.309017,-0.500000,-0.809017,
                  0.309017,-0.500000,-0.809017,  0.309017,-0.500000,-0.809017,
                  0.500000,-0.809017,-0.309017,  0.500000,-0.809017,-0.309017,
                  0.000000,-0.850651, 0.525731,  0.000000,-0.850651, 0.525731,
                  0.000000,-1.000000, 0.000000,  0.000000,-1.000000, 0.000000,
                  0.500000,-0.809017, 0.309017,  0.500000,-0.809017, 0.309017,
                 -0.850651,-0.525731, 0.000000, -0.850651,-0.525731, 0.000000,
                 -0.500000,-0.809017,-0.309017, -0.500000,-0.809017,-0.309017,
                 -0.500000,-0.809017, 0.309017, -0.500000,-0.809017, 0.309017,
                 -0.809017,-0.309017, 0.500000, -0.809017,-0.309017, 0.500000,
                 -0.309017,-0.500000, 0.809017, -0.309017,-0.500000, 0.809017,
                  0.309017,-0.500000, 0.809017,  0.309017,-0.500000, 0.809017,
                 -1.000000, 0.000000, 0.000000, -1.000000, 0.000000, 0.000000,
                 -0.809017,-0.309017,-0.500000, -0.809017,-0.309017,-0.500000,
                 -0.809017, 0.309017,-0.500000, -0.809017, 0.309017,-0.500000],

    "indices" : [ 1, 2, 0, 4, 1, 3, 2, 4, 5, 4, 2, 1, 7, 8, 6, 1, 7, 3, 8, 1, 0, 1, 8, 7,10,11, 9, 8,10, 6,
                 11, 8, 0, 8,11,10,11,12, 9,13,11, 0,12,13,14,13,12,11,13,15,14, 2,13, 0,15, 2, 5, 2,15,13,
                 17,18,16,15,17,14,18,15, 5,15,18,17,20,21,19,17,20,14,21,17,16,17,21,20,22,20,19,12,22, 9,
                 20,12,14,12,20,22,24,25,23,22,24, 9,25,22,19,22,25,24,27,28,26,25,27,23,28,25,19,25,28,27,
                 29,21,16,28,29,26,21,28,19,28,21,29,31,32,30,29,31,26,32,29,16,29,32,31,34,35,33,31,34,26,
                 35,31,30,31,35,34,36,37, 3,35,36,33,37,35,30,35,37,36, 4,38, 5,37, 4, 3,38,37,30,37,38, 4,
                 38,18, 5,32,38,30,18,32,16,32,18,38, 7,36, 3,39, 7, 6,36,39,33,39,36, 7,39,40,33,41,39, 6,
                 40,41,23,41,40,39,41,24,23,10,41, 6,24,10, 9,10,24,41,27,40,23,34,27,26,40,34,33,34,40,27]

};

function makeTorus (innerRadius, outerRadius, nSides, nRings) {
        
  var torus = {
      "vertices" : [],
      "indices"  : []
  };
  
  if (nSides < 3 ) nSides = 3;
  if (nRings < 3 ) nRings = 3;
        
  var dpsi =  2.0 * Math.PI / nRings ;
  var dphi = -2.0 * Math.PI / nSides ;
  var psi  =  0.0;
  
  for (var j = 0; j < nRings; j++) {
    
    var cpsi = Math.cos ( psi ) ;
    var spsi = Math.sin ( psi ) ;
    var phi      = 0.0;

    for (var i = 0; i < nSides; i++) {

      var cphi   = Math.cos ( phi ) ;
      var sphi   = Math.sin ( phi ) ;
      
      // coordinates
      torus.vertices.push( cpsi * ( outerRadius + cphi * innerRadius ) );
      torus.vertices.push( spsi * ( outerRadius + cphi * innerRadius ) );
      torus.vertices.push( sphi * innerRadius );
      
      // normal
      torus.vertices.push( cpsi * cphi, spsi * cphi, sphi );
      
      phi += dphi;
      
    }

    for (var i = 0; i < 6; i++)
      torus.vertices.push( torus.vertices[torus.vertices.length - nSides * 6] );

    psi += dpsi;
    
  }

  for (var i = 0; i < 6 * (nSides + 1); i++)
    torus.vertices.push( torus.vertices[i] );

  for (var j = 0; j < nRings; j++){
    
    var desp = j * (nSides + 1);

    for (var i = 0; i < nSides; i++){
      
      torus.indices.push(desp + i,     desp + i + 1,              desp + i + (nSides+1)); 
      torus.indices.push(desp + i + 1, desp + i + (nSides+1) + 1, desp + i + (nSides+1)); 
      
    }
    
  }

  return torus; 
  
}

function makeCover (nSides) {
        
  var cover = {
      "vertices" : [],
      "indices"  : []
  };
  
  if (nSides < 3 ) nSides = 3;

  // los otros vértices del circulo de la base
  for  (var i = 0; i < nSides; i++) {
    
    var phi  = i / nSides * 2.0 * Math.PI;
    var cphi = Math.cos(phi);
    var sphi = Math.sin(phi);
    
    // coordinates
    cover.vertices.push(cphi, sphi, 0.0);

    // normal
    cover.vertices.push(0.0, 0.0, 1.0);
    
  }
  
  // se añade el vértice central (el último del vector)
  cover.vertices.push(0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
  
  // se crea el vector de índices
  for (var i = 0; i < nSides; i++)      
    cover.indices.push (i, (i + 1) % nSides, nSides);
  
  return cover; 
  
}

function makeCylinder (nSides) {
        
  var cylinder = {
      "vertices" : [],
      "indices"  : []
  };
  
  if (nSides < 3 ) nSides = 3;

  // los vértices del circulo de las bases
  for  (var i = 0; i < nSides; i++) {
    
    var phi  = i / nSides * 2.0 * Math.PI;
    var cphi = Math.cos(phi);
    var sphi = Math.sin(phi);
    
    // coordinates
    cylinder.vertices.push(cphi, sphi, 0.0);

    // normal
    cylinder.vertices.push(cphi, sphi, 0.0);
    
    // coordinates
    cylinder.vertices.push(cphi, sphi, 1.0);

    // normal
    cylinder.vertices.push(cphi, sphi, 0.0);
    
  }
   
  // se crea el vector de índices
  var n = nSides * 2;
  for (var i = 0; i < n; i += 2){
      
    cylinder.indices.push (i,           (i + 2) % n, i + 1); 
    cylinder.indices.push ((i + 2) % n, (i + 3) % n, i + 1); 

  }

  return cylinder; 
  
}

function makeCone (nSides) {
        
  var cone = {
      "vertices" : [],
      "indices"  : []
  };
  
  if (nSides < 3 ) nSides = 3;
  
  // los vértices
  for  (var i = 0; i < nSides; i++) {
    
    var phi  = i / nSides * 2.0 * Math.PI;
    var cphi = Math.cos(phi);
    var sphi = Math.sin(phi);
    
    // coordinates
    cone.vertices.push(cphi, sphi, 0.0);

    // normal
    cone.vertices.push.apply(cone.vertices, vec3.normalize(vec3.create(), vec3.fromValues(cphi, sphi, 1.0)));
    
    // coordinates
    cone.vertices.push(0.0, 0.0, 1.0);

    // normal
    phi  = (i + 0.5) / nSides * 2.0 * Math.PI;
    cone.vertices.push.apply(cone.vertices, vec3.normalize(vec3.create(), vec3.fromValues( Math.cos(phi), Math.sin(phi), 1.0)));
    
  }

  var n = nSides * 2;
  for (var i = 0; i < n; i += 2)
    cone.indices.push (i, (i + 2) % n, i + 1); 

  return cone; 
  
}

function makeSphere (nSides, nRings) {
        
  var sphere = {
      "vertices" : [],
      "indices"  : []
  };
  
  if (nSides < 3 ) nSides = 3;
  if (nRings < 2 ) nRings = 2;
        
  var dphi  =       Math.PI / nRings ;
  var dzeta = 2.0 * Math.PI / nSides ;

  var myPhi = 0.0;

  for (var j = 0; j <= nRings; j++) {

    var myZeta = 0.0;
    
    for (var i = 0; i <= nSides; i++) {

      var x = Math.sin(myPhi) * Math.sin(myZeta);
      var y = Math.cos(myPhi);
      var z = Math.sin(myPhi) * Math.cos(myZeta);

      // coordinates
      sphere.vertices.push( x, y, z );
      
      // normal
      sphere.vertices.push( x, y, z );
       
      myZeta += dzeta;
      
    }

    myPhi += dphi;
    
  }

  for (var j = 0; j < nRings; j++) {
    
    var desp = j * (nSides + 1);

    for (var i = 0; i < nSides; i++){
      
      sphere.indices.push (desp + i,     desp + i + (nSides+1), desp + i + 1); 
      sphere.indices.push (desp + i + 1, desp + i + (nSides+1), desp + i + (nSides+1) + 1);       
    }
    
  }
  
  return sphere; 
  
}

